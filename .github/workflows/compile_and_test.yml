name: CMake

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]
  workflow_dispatch:

env:
  BUILD_TYPE: Release

defaults:
  run:
    shell: bash

jobs:
  build_and_test:
    name: Build & test TQMesh on ${{ matrix.os }} with ${{ matrix.compiler }}.
    runs-on: ${{ matrix.name }}
    strategy:
      matrix: 
        - {name: ubuntu - gcc,    os: ubuntu-latest,    flags: -DCMAKE_CXX_COMPILER=g++ -DCMAKE_C_COMPILER=gcc}
        - {name: ubuntu - clang,  os: ubuntu-latest,    flags: -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang}
        - {name: macos - gcc,     os: macos-latest,     flags: -DCMAKE_CXX_COMPILER=g++ -DCMAKE_C_COMPILER=gcc}
        - {name: macos - clang,   os: macos-latest,     flags: -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang}
        - {name: windows - msvc,  os: windows-latest,   flags: -DCMAKE_CXX_COMPILER=cl -DCMAKE_C_COMPILER=cl}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Add msbuild to PATH
      if: contains(matrix.name, 'msvc')
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Compile a release build of TQMesh
      run: |
        mkdir build
        cmake -S . -B build ${{ matrix.flags }}
        cmake --build build -j2
        make install -j2

    - name: Run all of tqmeshs tests.
      run: ./scripts/test_tqmesh.sh

